---
- name: Create Vault group
  ansible.builtin.group:
    name: "{{ vault_group }}"
    gid: "{{ vault_gid }}"
    state: present

- name: Create Vault User
  ansible.builtin.user:
    name: "{{ vault_user }}"
    group: "{{ vault_group }}"
    uid: "{{ vault_uid }}"
    state: present

- name: Create Configuration Directories
  ansible.builtin.file:
    path: /etc/vault.d
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
    state: directory

- name: Create ssl Directories
  ansible.builtin.file:
    path: /etc/vault.d/ssl
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
    state: directory

- name: Copy Cert File
  ansible.builtin.copy:
    content: "{{ vault_cert }}"
    dest: /etc/vault.d/ssl/vault.cert
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0640
    backup: yes

- name: Copy Cert Key
  ansible.builtin.copy:
    content: "{{ vault_key }}"
    dest: /etc/vault.d/ssl/vault.key
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0640
    backup: yes

- name: Create Vault Data Directory
  ansible.builtin.file:
    path: /var/vault
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
    state: directory

- name: Create Vault Directory
  ansible.builtin.file:
    path: /opt/vault/bin
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
    state: directory

- name: Create Vault Log Directory
  ansible.builtin.file:
    path: /var/log/vault
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
    state: directory

- name: Check Version Installed
  ansible.builtin.shell: |
         set -o pipefail
         if [ -f /opt/vault/bin/vault ]; then
           /opt/vault/bin/vault --version|awk 'NR==1{print $2}' |cut -dv -f2|cut -d' ' -f1
         fi
  args:
    executable: /bin/bash
  register: vault_version_check
  changed_when: vault_version_check.stdout != vault_version

- name: Download Vault Software
  ansible.builtin.unarchive:
    src: "{{ vault_zip_url }}"
    dest: /opt/vault/bin
    remote_src: yes
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
  when: vault_version_check.stdout != vault_version

- name: Copy Server Config
  ansible.builtin.template:
    src: vault_main.hcl.j2
    dest: /etc/vault.d/vault_main.hcl
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0640
    backup: yes

- name: Check that cap_ipc_lock is set (Debian)
  block:
    - name: Get cap_ipc_lock Status
      ansible.builtin.shell: |
            set -o pipefail
            getcap /opt/vault/bin/vault |cut -d' ' -f3
      args:
        executable: /bin/bash
      register: cap_check
      changed_when: cap_check.stdout != 'cap_ipc_lock+ep'

    - name: Enable non root mlock capability
      ansible.builtin.command: "setcap cap_ipc_lock=+ep /opt/vault/bin/vault"
      when: cap_check.stdout != 'cap_ipc_lock+ep'
  when: ansible_os_family == "Debian"

- name: Check that cap_ipc_lock is set (EL)
  block:
    - name: Get cap_ipc_lock Status
      ansible.builtin.shell: |
            set -o pipefail
            getcap /opt/vault/bin/vault |cut -d' ' -f2
      args:
        executable: /bin/bash
      register: cap_check
      changed_when: cap_check.stdout != 'cap_ipc_lock=ep'

    - name: Enable non root mlock capability
      ansible.builtin.command: "setcap cap_ipc_lock=+ep /opt/vault/bin/vault"
      when: cap_check.stdout != 'cap_ipc_lock=ep'
  when: ansible_os_family == "RedHat"

- name: Copy Startup Script (systemd)
  ansible.builtin.template:
    src: vault.service.j2
    dest: /etc/systemd/system/vault.service
    owner: "root"
    group: "root"
    mode: 0750
    backup: no
  notify:
    - enable vault
  when: ansible_service_mgr == 'systemd'

- name: Copy Startup Script
  ansible.builtin.template:
    src: vault_sysvinit.j2
    dest: /etc/init.d/vault
    owner: "root"
    group: "root"
    mode: 0750
    backup: no
  notify:
    - enable vault
  when: ansible_service_mgr == 'upstart'
